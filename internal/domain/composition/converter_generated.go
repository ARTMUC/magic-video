// Code generated by github.com/jmattheis/goverter, DO NOT EDIT.
//go:build !goverter

package composition

import contracts "github.com/ARTMUC/magic-video/internal/contracts"

type VideoCompositionConverterImpl struct{}

func (c *VideoCompositionConverterImpl) VideoCompositionDomainToContract(source VideoComposition) contracts.VideoComposition {
	var contractsVideoComposition contracts.VideoComposition
	contractsVideoComposition.BaseModel = BaseToBase(source.BaseModel)
	contractsVideoComposition.CustomerID = UUIDToUUID(source.CustomerID)
	contractsVideoComposition.VideoTemplate = source.VideoTemplate
	contractsVideoComposition.Status = source.Status
	if source.Images != nil {
		contractsVideoComposition.Images = make([]contracts.Image, len(source.Images))
		for i := 0; i < len(source.Images); i++ {
			contractsVideoComposition.Images[i] = c.VideoCompositionImageToContract(source.Images[i])
		}
	}
	return contractsVideoComposition
}
func (c *VideoCompositionConverterImpl) VideoCompositionDomainToContractArray(source []VideoComposition) []contracts.VideoComposition {
	var contractsVideoCompositionList []contracts.VideoComposition
	if source != nil {
		contractsVideoCompositionList = make([]contracts.VideoComposition, len(source))
		for i := 0; i < len(source); i++ {
			contractsVideoCompositionList[i] = c.VideoCompositionDomainToContract(source[i])
		}
	}
	return contractsVideoCompositionList
}
func (c *VideoCompositionConverterImpl) VideoCompositionImageToContract(source Image) contracts.Image {
	var contractsImage contracts.Image
	contractsImage.BaseModel = BaseToBase(source.BaseModel)
	contractsImage.Name = source.Name
	contractsImage.PresetImageType = source.PresetImageType
	return contractsImage
}
